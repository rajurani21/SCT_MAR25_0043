<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #1a1a2e;
            color: white;
            padding-top: 50px;
        }
        h1 {
            color: #ff4c29;
        }
        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
            margin: auto;
            width: 310px;
            margin-top: 20px;
        }
        .cell {
            width: 100px;
            height: 100px;
            background-color: #16213e;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            box-shadow: 0px 0px 10px #00f2ff;
        }
        .cell.winner {
            background-color: #00f2ff;
            color: black;
        }
        .reset-btn {
            margin-top: 20px;
            padding: 10px 20px;
            font-size: 1rem;
            border: none;
            background-color: #ff4c29;
            color: white;
            cursor: pointer;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <h1>Tic-Tac-Toe</h1>
    <div class="board" id="board"></div>
    <button class="reset-btn" onclick="resetGame()">Reset</button>

    <script>
        const board = document.getElementById("board");
        let cells = [];
        let currentPlayer = "X";
        let gameActive = true;

        // Winning combinations
        const winningCombinations = [
            [0, 1, 2], [3, 4, 5], [6, 7, 8], // Rows
            [0, 3, 6], [1, 4, 7], [2, 5, 8], // Columns
            [0, 4, 8], [2, 4, 6]  // Diagonals
        ];

        function createBoard() {
            for (let i = 0; i < 9; i++) {
                let cell = document.createElement("div");
                cell.classList.add("cell");
                cell.dataset.index = i;
                cell.addEventListener("click", handleCellClick);
                board.appendChild(cell);
                cells.push(cell);
            }
        }

        function handleCellClick(event) {
            let cell = event.target;
            if (cell.textContent || !gameActive) return;

            cell.textContent = currentPlayer;
            checkWinner();

            currentPlayer = currentPlayer === "X" ? "O" : "X";
        }

        function checkWinner() {
            for (let combo of winningCombinations) {
                let [a, b, c] = combo;
                if (cells[a].textContent && 
                    cells[a].textContent === cells[b].textContent &&
                    cells[a].textContent === cells[c].textContent) {
                    
                    gameActive = false;
                    cells[a].classList.add("winner");
                    cells[b].classList.add("winner");
                    cells[c].classList.add("winner");
                    alert(`${cells[a].textContent} Wins!`);
                    return;
                }
            }

            if ([...cells].every(cell => cell.textContent)) {
                gameActive = false;
                alert("It's a Draw!");
            }
        }

        function resetGame() {
            cells.forEach(cell => {
                cell.textContent = "";
                cell.classList.remove("winner");
            });
            gameActive = true;
            currentPlayer = "X";
        }

        createBoard();
    </script>
